import java.io.File;
import java.util.concurrent.*;

public class FileSearcher {
    private final ConcurrentLinkedQueue<File> fileQueue = new ConcurrentLinkedQueue<>();
    private final ExecutorService executorService = Executors.newFixedThreadPool(4);

    public static void main(String[] args) {
        if (args.length < 2) {
            System.out.println("Usage: FileSearcher <directory> <keyword>");
            return;
        }
        String directoryPath = args[0];
        String keyword = args[1];

        FileSearcher searcher = new FileSearcher();
        searcher.searchFiles(directoryPath, keyword);
    }

    public void searchFiles(String directoryPath, String keyword) {
        File dir = new File(directoryPath);
        if (dir.isDirectory()) {
            for (File file : dir.listFiles()) {
                if (file.isFile()) {
                    fileQueue.add(file);
                }
            }

            for (int i = 0; i < 4; i++) {
                executorService.submit(new SearchTask(fileQueue, keyword));
            }

            executorService.shutdown();
            try {
                executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("Provided path is not a directory");
        }
    }
}